import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define the shape of the state for this slice using TypeScript interface.
// isSidebarCollapsed - indicates whether the sidebar is collapsed.
// isDarkMode - indicates whether the application is in dark mode.
export interface InitialStateTypes {
  isSidebarCollapsed: boolean;
  isDarkMode: boolean;
}

// Set up the initial state for the global slice.
// By default, the sidebar is not collapsed and dark mode is turned off.
const initialState: InitialStateTypes = {
  isSidebarCollapsed: false,
  isDarkMode: false,
};

// Create a slice of the Redux store named 'global'. This manages global UI settings.
export const globalSlice = createSlice({
  name: "global", // Name of the slice, used to identify actions and reducer.
  initialState, // Initial state of the slice.
  reducers: {
    // Reducer to set the 'isSidebarCollapsed' state.
    // Takes the current state and an action with a boolean payload to update the state.
    setIsSidebarCollapsed: (state, action: PayloadAction<boolean>) => {
      state.isSidebarCollapsed = action.payload;
    },

    // Reducer to toggle the 'isDarkMode' state.
    // Takes the current state and an action with a boolean payload to update the state.
    setIsDarkMode: (state, action: PayloadAction<boolean>) => {
      state.isDarkMode = action.payload;
    },
  },
});

// Export the actions generated by createSlice for use in components.
// These actions can be dispatched to update the global state.
export const { setIsSidebarCollapsed, setIsDarkMode } = globalSlice.actions;

// Export the reducer generated by createSlice to be included in the store.
// This reducer handles all actions related to the global slice state.
export default globalSlice.reducer;
